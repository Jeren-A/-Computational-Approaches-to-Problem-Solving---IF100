# -*- coding: utf-8 -*-
"""jerena_hw5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JI21naFMvwt-M_O0_tetSz6IldgcnD6z
"""

def getInput(x):  # get input function
  if x == "puzzle":
    x = input("Please enter the puzzle: ")
  elif x == "words":
    x = input("Please enter the words: ")
  return x

def checkthelength(m):  #function to check the length validity
  list1 = m.split("-")
  k = True
  for g in range(len(list1)):
    if len(list1[g]) != len(list1[0]):
      k = False
      break
  return k

def checkInput(i): # checkipnut function checking the validity of input
  if i.count("-") >= 1:
    list2 = i.split("-")
    for n in list2:
      if n.isalpha() == False:
        return False
    if checkthelength(i) == True:    
      return True
  return False 


def printPuzzle(s):  # prints the values of rows and columns
  list1 = s.split("-")
  for i in list1:
    i = i.lower()
    print(i)

def HorizantalsListLR(puzzle):  #makes the list of the rows from Left to Right
  puzzle = puzzle.split("-")
  return puzzle

def HorizantalsListRL(puzzle):  #makes the list of the rows from Right to Left
  puzzle = puzzle.split("-")
  newp = []
  for i in puzzle:
    reversedwrd= ""
    for a in range(len(i)-1, -1, -1):
      reversedwrd+=i[a]
    newp.append(reversedwrd)
  return newp

def VerticalListUB(puzzle):     #makes the list of columns from top to bottom
  puzzle = puzzle.split("-")
  newpuzzle= []
  for i in range(len(puzzle[0])):
    newp = ""
    for a in range(len(puzzle)):
      newp+= puzzle[a][i]
    newpuzzle.append(newp)
  return newpuzzle
def VerticalListBU(puzzle):      #makes the list of columns from bottom to top
  puzzle = VerticalListUB(puzzle)
  newp = []
  for i in puzzle:
    reversedwrd= ""
    for a in range(len(i)-1, -1, -1):
      reversedwrd+=i[a]
    newp.append(reversedwrd)
  return newp


def findWords(puzzle, words):
  words = words.split(",")
  horlistLR = HorizantalsListLR(puzzle)
  verlistUB = VerticalListUB(puzzle)
  horlistRL = HorizantalsListRL(puzzle)
  verlistBU = VerticalListBU(puzzle)
  foundwords = []
  for word in words:
    word = word.lower()
    for numrow in range(len(horlistLR)):
      line = (horlistLR[numrow]).lower()
      if word in line:
        index = line.find(word)
        print("Found ", word, " at (", numrow, "," ,index, ")-(", numrow, ",", index+len(word)-1, ")", sep = "")
        foundwords.append(word)
    for numcolumn in range(len(verlistUB)):
      line = (verlistUB[numcolumn]).lower()
      if word in line:
        index = line.find(word)
        print("Found ",word, " at (", index, ",",numcolumn, ")-(", index+len(word)-1, ",", numcolumn, ")", sep = "")
        foundwords.append(word)
    for numrow in range(len(horlistRL)):
      line = (horlistRL[numrow]).lower()
      if word in line :
        index = line.find(word)
        starting_pos = len(horlistRL[numrow])-1 - index
        print("Found ", word, " at (", numrow, "," ,starting_pos, ")-(", numrow, ",", starting_pos-len(word)+1, ")", sep = "")
        foundwords.append(word)
    for numcolumn in range(len(verlistBU)):
      line = (verlistBU[numcolumn]).lower()
      if word in line:
        index = line.find(word)
        starting_pos = len(verlistBU[numcolumn])-1-index
        print("Found ",word, " at (",starting_pos, ",",numcolumn, ")-(", starting_pos- len(word)+1, ",", numcolumn, ")", sep = "")
        foundwords.append(word)

    if word not in foundwords:
      print(word, "does not exist.")
        


puzzle = getInput("puzzle")
while not checkInput(puzzle):
  print("Wrong input format.")
  puzzle = getInput("puzzle")

words = getInput("words")
printPuzzle(puzzle)
findWords(puzzle,words)